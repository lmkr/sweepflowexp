open ASAP;

(* setup a simple ordinary state space exploration *)
structure WSStorage = HashStorage(structure Model = CPNToolsModel
                                  structure Hash=CPNToolsHashFunction);

structure WSQueue = FifoQueue;

structure WSExploration = 
  WaitingSetExploration (structure Model = CPNToolsModel
                         structure Storage = WSStorage
                         structure WaitingSet = WSQueue);

structure WSSimpleTraceExploration = 
  SimpleTraceExploration (structure Exploration = WSExploration);

structure RealSimpleTraceBTExploration =
  RealSimpleTraceExploration (structure Exploration = WSSimpleTraceExploration);

val iss = CPNToolsModel.getInitialStates ();
val is = #1 (List.hd (CPNToolsModel.getInitialStates ()));

fun explore () = 
    RealSimpleTraceBTExploration.explore (WSStorage.emptyStorage {init_size = 1000} is) iss;

(* ordering on progress value *)
structure PM_ORD_KEY : ORD_KEY = 
struct
  type ord_key = IntInf.int;
  val compare = IntInf.compare;
end;

(* trivial progress measure *)
fun wspm0 _ = 0 : PM_ORD_KEY.ord_key;

(*
(* simple indicator function for non-empty multisets *)
fun ims [] = 0
 |  ims _ = 1;
  
(* map a vector of numbers according to base - first element is most significant*)

fun basemap _ [] result = result
 |  basemap bs (x::xs) result = basemap bs xs (IntInf.+(IntInf.*(bs,result),IntInf.fromInt x))

(* extract the monotonic progress components related to the main connection states *)
fun extractnmpmvector 
  ({WebSocket={Client={CLOSED=clientclosed,
                        Close_WebSocket_Connection={ClientInitiated={CLOSING_1=clientclosing1},
                                                                     Recieve_PingPong=_,
                                                                     Server_Initiated={CLOSING_2=clientclosing2}},
                        Data_Transfer={ClientPingPong={Recieve_PingPong=_,
                                                       SendPing_Pong=_},
                                       ClientReceiveMessage={Messages=_},
                                       ClientSendMessage={Message=clientmsg,
                                                          Ready=clientready}},
                        Establish_WebSocket_Connection={OPENING=clientopening,WAITING=clientwaiting,
                                                        WAITING_VALIDATE=clientwaitingvalidate},
                        IDLE=clientidle,
                        OPEN=clientopen},
                ClientToServer=_,
                Server={CLOSED=serverclosed,
                        OPEN=serveropen,
                        READY=serverready,
                        ServerClose_WebSocketConnection={ClientInitiated={CLOSING_2=serverclosing2},
                                                         Recieve_Ping=_,
                                                         ServerInitiated={CLOSING_1=serverclosing1}},
                        ServerEstablish_WebSocket_Connection={OPENING=serveropening,
                                                              WAITING=serverwaiting,
                                                              WAITING_VALIDATE=serverwaitingvalidate},
                        Server_Data_Transfer={ServerPingPong={Recieve_PingPoing=_,
                                                              Send_PingPong=_},
                                              ServerReceiveMessage={Messages=_},
                                              ServerSendMessage={Message=servermsg,
                                                                 Ready=servermsgready}}},
                ServerToClient=_}} : CPNToolsModel.state) = 
  [ims servermsg,
   ims clientmsg,
   ims servermsgready,
   ims clientready];


(* setup of sweep-line exploration *)
structure WS_PM : PROGRESS_MEASURE = 
struct
  structure Progress = PM_ORD_KEY
  type state = CPNToolsModel.state * CPNToolsModel.event list;

  fun getProgress (s,_) = wspm0 s
end;

structure WS_SweepExploration = 
  SweepLineStatisticsExploration (val markInitStatesAsPersistent = false
                        structure Storage = WSStorage
                        structure Model = CPNToolsModel
                        structure Measure = WS_PM);

fun slexplore () = WS_SweepExploration.explore 
                   {a_initial = (), 
                    arc_hook = fn (_,a) => a,
                    s_initial = (),
                    state_hook = fn (_,b) => b} (WSStorage.emptyStorage {init_size = 1000} is) iss;

